AWSTemplateFormatVersion: "2010-09-09"
Transform: [AWS::LanguageExtensions, AWS::Serverless-2016-10-31]
Description: Digital Identity IPV CRI Ipv-Cri-OTG-Hmrc-Smoke-Tests API

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, localdev, build, staging, integration, production]
    ConstraintDescription: must be dev, localdev, build, staging, integration or production
  CodeSigningConfigArn:
    Type: String
    Default: ""

Conditions:
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, ""]]
  EnforceCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, ""]]
  IsNotDevEnvironment: !Not [!Equals [!Ref Environment, dev]]

Globals:
  Function:
    Timeout: 30
    CodeUri: ..
    Runtime: nodejs18.x
    Architectures: [ arm64 ]
    PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps

Resources:

  OTGCanaryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevEnvironment
    Properties:
      AlarmDescription: "Alarm for when OTG Canary Fail"
      AlarmName: "otg-canary-failure"
      ActionsEnabled: true
      Namespace: SmokeTests
      MetricName: "Failed"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Statistic: Sum
      Period: 3600
      Threshold: 3
      TreatMissingData: notBreaching
      AlarmActions:
        - !ImportValue platform-alarm-warning-alert-topic
      Dimensions:
        - Name: "CanaryName"
          Value: !Ref OTGCanary

  CanariesRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If [ UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: NinoCanariesExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !GetAtt CanariesBucket.Arn
                Action: s3:GetBucketLocation
              - Effect: Allow
                Resource: !Sub ${CanariesBucket.Arn}/*
                Action: s3:PutObject
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:ListAllMyBuckets
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface

  CanariesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-otg-canary-bucket
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CanaryInvokerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Sourcemap: true
    Properties:
      Timeout: 60
      Handler: lambdas/canary-invoker/src/canary-invoker-handler.lambdaHandler
      LoggingConfig:
        LogGroup: !Ref CanaryInvokerFunctionLogGroup
      CodeSigningConfigArn:
        !If [EnforceCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - synthetics:GetCanary
              - synthetics:StopCanary
              - synthetics:StartCanary
              - synthetics:DescribeCanariesLastRun
            Resource: !Sub arn:aws:synthetics:${AWS::Region}:${AWS::AccountId}:canary:${OTGCanary}

  CanaryInvokerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}/CanaryInvokerFunction
      RetentionInDays: 30

  OTGCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: get-bearer-token
      StartCanaryAfterCreation: true
      ArtifactS3Location: !Sub s3://${CanariesBucket}/ci
      ExecutionRoleArn: !GetAtt CanariesRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-7.0
      VPCConfig:
        SecurityGroupIds:
          - !ImportValue otg-vpc-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue otg-vpc-ProtectedSubnetIdA
          - !ImportValue otg-vpc-ProtectedSubnetIdB
      Schedule:
        Expression: rate(15 minutes)
      Tags:
        - Key: Blueprint
          Value: canaryRecorder
        - Key: Repository
          Value: govuk-one-login/ipv-cri-otg-hmrc-smoke-tests
      Code:
        Handler: exports.handler
        Script:
          !Sub
          - |
            const synthetics = require('Synthetics');
            const syntheticsConfiguration = synthetics.getConfiguration();
            const apiCanaryBlueprint = async function () {
              syntheticsConfiguration.setConfig({
                restrictedHeaders: [],
                restrictedUrlParameters: []
              });

              const validateSuccessful = async function(res) {
                return new Promise((resolve, reject) => {
                  if (res.statusCode !== 200) {
                    throw new Error(res.statusCode + ' ' + res.statusMessage);
                  }
                  let responseBody = '';
                  res.on('data', (d) => {
                    responseBody += d;
                  });
                  res.on('end', () => {
                    const body = JSON.parse(responseBody);
                    if (body.token != "goodToken" && body.expiry != "123456") {
                      throw new Error("Unexpected body" + responseBody);
                    }
                    resolve();
                  });
                });
              };
              let requestOptionsStep1 = {
                hostname: '${OtgURL}',
                method: 'GET',
                path: '/${env}/token?tokenType=monitoring',
                port: '443',
                protocol: 'https:',
                body: "",
                headers: {}
              };
              requestOptionsStep1['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep1['headers']['User-Agent']].join(' ');
              let stepConfig1 = {
                includeRequestHeaders: false,
                includeResponseHeaders: false,
                includeRequestBody: false,
                includeResponseBody: false,
                continueOnHttpStepFailure: true
              };
              await synthetics.executeHttpStep('Verify https://${OtgURL}', requestOptionsStep1, validateSuccessful, stepConfig1);
            };

            exports.handler = async () => {
              return await apiCanaryBlueprint();
            };
          - OtgURL: !Sub "{{resolve:ssm:/otg-hmrc-service/otg-service-url}}"
            env: !Ref Environment

Outputs:
  CanaryInvokerFunctionName:
    Description: CanaryInvoker Lambda Function Name
    Value: !Ref CanaryInvokerFunction
  CanaryNames:
    Description: The names of the all canaries created by the stack
    Value: !Ref OTGCanary
